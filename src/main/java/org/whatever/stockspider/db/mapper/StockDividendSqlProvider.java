package org.whatever.stockspider.db.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import java.util.List;
import java.util.Map;
import org.whatever.stockspider.db.entity.StockDividend;
import org.whatever.stockspider.db.entity.StockDividendExample.Criteria;
import org.whatever.stockspider.db.entity.StockDividendExample.Criterion;
import org.whatever.stockspider.db.entity.StockDividendExample;

public class StockDividendSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table stock_dividend
     *
     * @mbggenerated Tue Apr 23 11:18:21 CST 2024
     */
    public String countByExample(StockDividendExample example) {
        BEGIN();
        SELECT("count(*)");
        FROM("stock_dividend");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table stock_dividend
     *
     * @mbggenerated Tue Apr 23 11:18:21 CST 2024
     */
    public String deleteByExample(StockDividendExample example) {
        BEGIN();
        DELETE_FROM("stock_dividend");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table stock_dividend
     *
     * @mbggenerated Tue Apr 23 11:18:21 CST 2024
     */
    public String insertSelective(StockDividend record) {
        BEGIN();
        INSERT_INTO("stock_dividend");
        
        if (record.getId() != null) {
            VALUES("ID", "#{id,jdbcType=BIGINT}");
        }
        
        if (record.getCode() != null) {
            VALUES("CODE", "#{code,jdbcType=VARCHAR}");
        }
        
        if (record.getName() != null) {
            VALUES("NAME", "#{name,jdbcType=VARCHAR}");
        }
        
        if (record.getImplPlanProfile() != null) {
            VALUES("IMPL_PLAN_PROFILE", "#{implPlanProfile,jdbcType=VARCHAR}");
        }
        
        if (record.getEquityRecordDate() != null) {
            VALUES("EQUITY_RECORD_DATE", "#{equityRecordDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getExDividendDate() != null) {
            VALUES("EX_DIVIDEND_DATE", "#{exDividendDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getNoticeDate() != null) {
            VALUES("NOTICE_DATE", "#{noticeDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPlanNoticeDate() != null) {
            VALUES("PLAN_NOTICE_DATE", "#{planNoticeDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPretaxBonusRmb() != null) {
            VALUES("PRETAX_BONUS_RMB", "#{pretaxBonusRmb,jdbcType=DECIMAL}");
        }
        
        if (record.getAftertaxBonusRmb() != null) {
            VALUES("AFTERTAX_BONUS_RMB", "#{aftertaxBonusRmb,jdbcType=DECIMAL}");
        }
        
        if (record.getBaseShare() != null) {
            VALUES("BASE_SHARE", "#{baseShare,jdbcType=INTEGER}");
        }
        
        if (record.getHandsel() != null) {
            VALUES("HANDSEL", "#{handsel,jdbcType=DECIMAL}");
        }
        
        if (record.getTransfer() != null) {
            VALUES("TRANSFER", "#{transfer,jdbcType=DECIMAL}");
        }
        
        if (record.getGmtCreate() != null) {
            VALUES("GMT_CREATE", "#{gmtCreate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getGmtModified() != null) {
            VALUES("GMT_MODIFIED", "#{gmtModified,jdbcType=TIMESTAMP}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table stock_dividend
     *
     * @mbggenerated Tue Apr 23 11:18:21 CST 2024
     */
    public String selectByExample(StockDividendExample example) {
        BEGIN();
        if (example != null && example.isDistinct()) {
            SELECT_DISTINCT("ID");
        } else {
            SELECT("ID");
        }
        SELECT("CODE");
        SELECT("NAME");
        SELECT("IMPL_PLAN_PROFILE");
        SELECT("EQUITY_RECORD_DATE");
        SELECT("EX_DIVIDEND_DATE");
        SELECT("NOTICE_DATE");
        SELECT("PLAN_NOTICE_DATE");
        SELECT("PRETAX_BONUS_RMB");
        SELECT("AFTERTAX_BONUS_RMB");
        SELECT("BASE_SHARE");
        SELECT("HANDSEL");
        SELECT("TRANSFER");
        SELECT("GMT_CREATE");
        SELECT("GMT_MODIFIED");
        FROM("stock_dividend");
        applyWhere(example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            ORDER_BY(example.getOrderByClause());
        }
        
        if(example != null){
            return SQL().concat(" limit "+example.getOffset()+","+example.getLimit());
        }
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table stock_dividend
     *
     * @mbggenerated Tue Apr 23 11:18:21 CST 2024
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        StockDividend record = (StockDividend) parameter.get("record");
        StockDividendExample example = (StockDividendExample) parameter.get("example");
        
        BEGIN();
        UPDATE("stock_dividend");
        
        if (record.getId() != null) {
            SET("ID = #{record.id,jdbcType=BIGINT}");
        }
        
        if (record.getCode() != null) {
            SET("CODE = #{record.code,jdbcType=VARCHAR}");
        }
        
        if (record.getName() != null) {
            SET("NAME = #{record.name,jdbcType=VARCHAR}");
        }
        
        if (record.getImplPlanProfile() != null) {
            SET("IMPL_PLAN_PROFILE = #{record.implPlanProfile,jdbcType=VARCHAR}");
        }
        
        if (record.getEquityRecordDate() != null) {
            SET("EQUITY_RECORD_DATE = #{record.equityRecordDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getExDividendDate() != null) {
            SET("EX_DIVIDEND_DATE = #{record.exDividendDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getNoticeDate() != null) {
            SET("NOTICE_DATE = #{record.noticeDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPlanNoticeDate() != null) {
            SET("PLAN_NOTICE_DATE = #{record.planNoticeDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPretaxBonusRmb() != null) {
            SET("PRETAX_BONUS_RMB = #{record.pretaxBonusRmb,jdbcType=DECIMAL}");
        }
        
        if (record.getAftertaxBonusRmb() != null) {
            SET("AFTERTAX_BONUS_RMB = #{record.aftertaxBonusRmb,jdbcType=DECIMAL}");
        }
        
        if (record.getBaseShare() != null) {
            SET("BASE_SHARE = #{record.baseShare,jdbcType=INTEGER}");
        }
        
        if (record.getHandsel() != null) {
            SET("HANDSEL = #{record.handsel,jdbcType=DECIMAL}");
        }
        
        if (record.getTransfer() != null) {
            SET("TRANSFER = #{record.transfer,jdbcType=DECIMAL}");
        }
        
        if (record.getGmtCreate() != null) {
            SET("GMT_CREATE = #{record.gmtCreate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getGmtModified() != null) {
            SET("GMT_MODIFIED = #{record.gmtModified,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table stock_dividend
     *
     * @mbggenerated Tue Apr 23 11:18:21 CST 2024
     */
    public String updateByExample(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("stock_dividend");
        
        SET("ID = #{record.id,jdbcType=BIGINT}");
        SET("CODE = #{record.code,jdbcType=VARCHAR}");
        SET("NAME = #{record.name,jdbcType=VARCHAR}");
        SET("IMPL_PLAN_PROFILE = #{record.implPlanProfile,jdbcType=VARCHAR}");
        SET("EQUITY_RECORD_DATE = #{record.equityRecordDate,jdbcType=TIMESTAMP}");
        SET("EX_DIVIDEND_DATE = #{record.exDividendDate,jdbcType=TIMESTAMP}");
        SET("NOTICE_DATE = #{record.noticeDate,jdbcType=TIMESTAMP}");
        SET("PLAN_NOTICE_DATE = #{record.planNoticeDate,jdbcType=TIMESTAMP}");
        SET("PRETAX_BONUS_RMB = #{record.pretaxBonusRmb,jdbcType=DECIMAL}");
        SET("AFTERTAX_BONUS_RMB = #{record.aftertaxBonusRmb,jdbcType=DECIMAL}");
        SET("BASE_SHARE = #{record.baseShare,jdbcType=INTEGER}");
        SET("HANDSEL = #{record.handsel,jdbcType=DECIMAL}");
        SET("TRANSFER = #{record.transfer,jdbcType=DECIMAL}");
        SET("GMT_CREATE = #{record.gmtCreate,jdbcType=TIMESTAMP}");
        SET("GMT_MODIFIED = #{record.gmtModified,jdbcType=TIMESTAMP}");
        
        StockDividendExample example = (StockDividendExample) parameter.get("example");
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table stock_dividend
     *
     * @mbggenerated Tue Apr 23 11:18:21 CST 2024
     */
    public String updateByPrimaryKeySelective(StockDividend record) {
        BEGIN();
        UPDATE("stock_dividend");
        
        if (record.getCode() != null) {
            SET("CODE = #{code,jdbcType=VARCHAR}");
        }
        
        if (record.getName() != null) {
            SET("NAME = #{name,jdbcType=VARCHAR}");
        }
        
        if (record.getImplPlanProfile() != null) {
            SET("IMPL_PLAN_PROFILE = #{implPlanProfile,jdbcType=VARCHAR}");
        }
        
        if (record.getEquityRecordDate() != null) {
            SET("EQUITY_RECORD_DATE = #{equityRecordDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getExDividendDate() != null) {
            SET("EX_DIVIDEND_DATE = #{exDividendDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getNoticeDate() != null) {
            SET("NOTICE_DATE = #{noticeDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPlanNoticeDate() != null) {
            SET("PLAN_NOTICE_DATE = #{planNoticeDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPretaxBonusRmb() != null) {
            SET("PRETAX_BONUS_RMB = #{pretaxBonusRmb,jdbcType=DECIMAL}");
        }
        
        if (record.getAftertaxBonusRmb() != null) {
            SET("AFTERTAX_BONUS_RMB = #{aftertaxBonusRmb,jdbcType=DECIMAL}");
        }
        
        if (record.getBaseShare() != null) {
            SET("BASE_SHARE = #{baseShare,jdbcType=INTEGER}");
        }
        
        if (record.getHandsel() != null) {
            SET("HANDSEL = #{handsel,jdbcType=DECIMAL}");
        }
        
        if (record.getTransfer() != null) {
            SET("TRANSFER = #{transfer,jdbcType=DECIMAL}");
        }
        
        if (record.getGmtCreate() != null) {
            SET("GMT_CREATE = #{gmtCreate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getGmtModified() != null) {
            SET("GMT_MODIFIED = #{gmtModified,jdbcType=TIMESTAMP}");
        }
        
        WHERE("ID = #{id,jdbcType=BIGINT}");
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table stock_dividend
     *
     * @mbggenerated Tue Apr 23 11:18:21 CST 2024
     */
    protected void applyWhere(StockDividendExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}